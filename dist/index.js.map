{"version":3,"sources":["../src/actions/transfer.ts","../src/utils/index.ts","../src/index.ts"],"sourcesContent":["import {\n    type ActionExample,\n    type HandlerCallback,\n    type IAgentRuntime,\n    type Memory,\n    ModelClass,\n    type State,\n    type Action,\n    composeContext,\n    generateObject,\n    elizaLogger,\n} from \"@elizaos/core\";\nimport {\n    getQuaiAccount,\n    isTransferContent,\n    validateSettings,\n} from \"../utils\";\nimport { getAddress, isQuaiAddress, parseUnits, TransactionReceipt, type TransactionRequest } from \"quais\";\nelizaLogger.debug(\"Loaded Quai plugin actions.\");\nconst transferTemplate = `Respond with a JSON markdown block containing only the extracted values.\n\nExample response:\n\\`\\`\\`json\n{\n    \"recipient\": \"0x0005C06bD1339c79700a8DAb35DE0a1b61dFBD71\",\n    \"amount\": \"0.001\"\n}\n\\`\\`\\`\n\n{{recentMessages}}\n\nGiven the recent messages, extract the following information about the requested QUAI transfer:\n- Recipient wallet address\n- Amount to send in QUAI\n\nRespond with a JSON markdown block containing only the extracted values.`;\n\n// Action definition\nexport const sendQuaiAction: Action = {\n    name: \"SEND_QUAI\",\n    similes: [\n        \"TRANSFER_QUAI\",              // Existing: General transfer intent\n        \"SEND_NATIVE_QUAI\",           // Existing: Native Quai specificity\n        \"PAY_WITH_QUAI\",              // Existing: Payment connotation\n        \"SEND_QUAI_FROM_AGENT\",       // Clarifies agent as sender\n        \"TRANSFER_QUAI_TO_ADDRESS\",   // Emphasizes destination\n        \"GIVE_QUAI_TO_RECIPIENT\",     // Casual giving intent\n        \"MOVE_QUAI_TO_WALLET\",        // Movement phrasing\n        \"DISPATCH_QUAI\",              // Dispatch/send intent\n        \"FORWARD_QUAI\",               // Forwarding connotation\n        \"SEND_QUAI_PAYMENT\",          // Payment-specific sending\n        \"TRANSFER_CRYPTO_QUAI\",       // Broader crypto context\n        \"EXECUTE_QUAI_TRANSFER\",      // Formal execution intent\n        \"SEND_QUAI_TO_USER\",          // User-specific sending\n    ],\n    validate: async (runtime: IAgentRuntime, _message: Memory) => {\n        return validateSettings(runtime);\n    },\n    description: \"MUST use this action if the user requests the agent to send or transfer native QUAI to a specified address.\",    handler: async (\n        runtime: IAgentRuntime,\n        message: Memory,\n        state: State,\n        _options: { [key: string]: unknown },\n        callback?: HandlerCallback\n    ): Promise<boolean> => {\n        elizaLogger.log(\"Starting SEND_QUAI handler...\");\n\n        // Initialize or update state\n        const currentState = !state \n            ? await runtime.composeState(message) \n            : await runtime.updateRecentMessageState(state);\n\n        // Compose transfer context\n        const transferContext = composeContext({\n            state: currentState,\n            template: transferTemplate,\n        });\n\n        // Generate transfer content\n        const content = await generateObject({\n            runtime,\n            context: transferContext,\n            modelClass: ModelClass.MEDIUM,\n        });\n\n        elizaLogger.debug(\"Transfer content:\", content);\n\n        // Validate transfer content\n        if (!isTransferContent(content)) {\n            elizaLogger.error(\"Invalid content for SEND_QUAI action.\");\n            if (callback) {\n                callback({\n                    text: \"Not enough information to transfer QUAI. Please provide recipient and amount.\",\n                    content: { error: \"Invalid transfer content\" },\n                });\n            }\n            return false;\n        }\n\n        try {\n            const account = await getQuaiAccount();\n            const amountInWei = parseUnits(content.amount.toString(), 18);\n            if(getAddress(content.recipient) === null || isQuaiAddress(getAddress(content.recipient)) === false) {\n                elizaLogger.error(\"Invalid recipient address: \", content.recipient);\n                if (callback) {\n                    callback({\n                        text: `Invalid recipient address: ${content.recipient}`,\n                        content: { error: \"Invalid recipient address\" },\n                    });\n                }\n            }\n            const txObj: TransactionRequest = {\n                to: getAddress(content.recipient),\n                value: amountInWei,\n                from: account.address,\n            };\n\n            elizaLogger.log(\n                \"Transferring\",\n                content.amount,\n                \"QUAI\",\n                \"to\",\n                content.recipient\n            );\n\n            const tx = await account.sendTransaction(txObj);\n            const receipt = await tx.wait();\n\n            if (\"status\" in receipt && receipt.status === 1) {\n                elizaLogger.success(`Transfer completed successfully! tx: ${tx.hash}`);\n                if (callback) {\n                    callback({\n                        text: `Transfer completed successfully! tx: ${tx.hash}`,\n                        content: {},\n                    });\n                }\n                return true;\n            } else {\n                elizaLogger.error(\"Transaction failed:\", receipt);\n                if (callback) {\n                    callback({\n                        text: `Transfer failed. Transaction hash: ${tx.hash}`,\n                        content: { error: \"Transaction failed\" },\n                    });\n                }\n                return false;\n            }\n        } catch (error) {\n            elizaLogger.error(\"Error during QUAI transfer:\", error);\n            if (callback) {\n                callback({\n                    text: `Error transferring QUAI: ${error.message}`,\n                    content: { error: error.message },\n                });\n            }\n            return false;\n        }\n    },\n\n    examples: [\n        [\n            { user: \"{{user1}}\", content: { text: \"Send 10 QUAI to 0x009d36570d4e46f48e99674bd3fcc84644ddd6b96f7c741b1562b82f9e004dc7\" } },\n            { user: \"{{agent}}\", content: { text: \"transferring 10 quai to that address now. hold tight.\" } },\n        ],\n        [\n            { user: \"{{user1}}\", content: { text: \"Please send 0.5 QUAI to 0x00fe2b97c1fd336e750087d68b9b867997fd64a2661ff3ca5a7c771641e8e7ac\" } },\n            { user: \"{{agent}}\", content: { text: \"got it. sending 0.5 quai to that address. will confirm when it’s done.\" } },\n        ],\n        [\n            { user: \"{{user2}}\", content: { text: \"Transfer 2 QUAI to 0x0034...\" } },\n            { user: \"{{agent}}\", content: { text: \"moving 2 quai to 0x0034... as we speak.\" } },\n        ],\n        [\n            { user: \"{{user3}}\", content: { text: \"Pay 1 QUAI to 0x0078...\" } },\n            { user: \"{{agent}}\", content: { text: \"paying 1 quai to 0x0078... let’s make it happen.\" } },\n        ],\n        [\n            { user: \"{{user4}}\", content: { text: \"Give 5 QUAI to 0x00bc...\" } },\n            { user: \"{{agent}}\", content: { text: \"handing over 5 quai to 0x00bc... consider it done.\" } },\n        ],\n        [\n            { user: \"{{user5}}\", content: { text: \"Send 0.1 QUAI to my friend at 0x00f0...\" } },\n            { user: \"{{agent}}\", content: { text: \"sending 0.1 quai to your friend’s wallet at 0x00f0... should be there soon.\" } },\n        ],\n        [\n            { user: \"{{user6}}\", content: { text: \"Move 3 QUAI to 0x00ed...\" } },\n            { user: \"{{agent}}\", content: { text: \"shifting 3 quai to 0x00ed... on its way.\" } },\n        ],\n    ] as ActionExample[][],\n} as Action;\n\nexport const receiveQuaiAction: Action = {\n    name: \"RECEIVE_QUAI\",\n    similes: [\n        \"SEND_QUAI_TO_AGENT\",         // Existing: Direct sending to agent\n        \"TRANSFER_QUAI_TO_AGENT\",     // Existing: Transfer phrasing\n        \"GIVE_QUAI_TO_AGENT\",         // Existing: Giving connotation\n        \"SEND_QUAI_TO_ME\",            // Matches \"send Quai to me\" flipped\n        \"PROVIDE_QUAI_ADDRESS\",       // Intent to get address for sending\n        \"RECEIVE_QUAI_FROM_USER\",     // Reverse perspective\n        \"SHARE_QUAI_WALLET\",          // Sharing wallet for receiving\n        \"ACCEPT_QUAI_PAYMENT\",        // Accepting Quai\n        \"GET_QUAI_FROM_YOU\",          // User offering Quai\n        \"DEPOSIT_QUAI_TO_AGENT\",      // Depositing to agent\n        \"QUAI_TO_AGENT_WALLET\",       // Broad Quai-to-agent intent\n        \"SEND_CRYPTO_TO_AGENT\",       // Broader crypto context\n        \"I_WANT_TO_SEND_QUAI\",        // Matches your exact input intent\n    ],\n    validate: async (runtime: IAgentRuntime, _message: Memory) => {\n        return validateSettings(runtime);\n    },\n    description: \"Triggers when the user wants to send Quai to the agent or requests the agent's Quai wallet address.\",\n    handler: async (\n        runtime: IAgentRuntime,\n        message: Memory,\n        state: State,\n        _options: { [key: string]: unknown },\n        callback?: HandlerCallback\n    ): Promise<boolean> => {\n        elizaLogger.log(\"Starting RECEIVE_QUAI handler...\");\n\n        try {\n            const account = await getQuaiAccount();\n            const agentAddress = account.address;\n\n            if (callback) {\n                callback({\n                    text: `To send Quai to me, please use the following address: ${agentAddress}. Make sure to double-check the address before sending.`,\n                    content: { address: agentAddress },\n                });\n            }\n            return true;\n        } catch (error) {\n            elizaLogger.error(\"Error in RECEIVE_QUAI action:\", error);\n            if (callback) {\n                callback({\n                    text: \"There was an error retrieving my address. Please try again later.\",\n                    content: { error: error.message },\n                });\n            }\n            return false;\n        }\n    },\n    examples: [\n        [\n            {\n                user: \"{{user1}}\",\n                content: { text: \"I want to send you some Quai. What's your address?\" },\n            },\n            {\n                user: \"{{agent}}\",\n                content: { text: \"to send me quai, use this address: 0xAgentAddressHere\" },\n            },\n        ],\n        [\n            {\n                user: \"{{user2}}\",\n                content: { text: \"Can I send you Quai? Please provide your address.\" },\n            },\n            {\n                user: \"{{agent}}\",\n                content: { text: \"to send me quai, use this address: 0xAgentAddressHere\" },\n            },\n        ],\n        [\n            {\n                user: \"{{user3}}\",\n                content: { text: \"I would like to send you QUAI\" },\n            },\n            {\n                user: \"{{agent}}\",\n                content: { text: \"to send me quai, use this address: 0xAgentAddressHere\" },\n            },\n        ],\n        [\n            {\n                user: \"{{user4}}\",\n                content: { text: \"Send you QUAI\" },\n            },\n            {\n                user: \"{{agent}}\",\n                content: { text: \"to send me quai, use this address: 0xAgentAddressHere\" },\n            },\n        ],\n        [\n            {\n                user: \"{{user5}}\",\n                content: { text: \"What’s your QUAI address?\" },\n            },\n            {\n                user: \"{{agent}}\",\n                content: { text: \"to send me quai, use this address: 0xAgentAddressHere\" },\n            },\n        ],\n    ] as ActionExample[][],\n};","import type { Content, IAgentRuntime } from \"@elizaos/core\";\nimport { elizaLogger } from \"@elizaos/core\";\nimport { Mnemonic, QuaiHDWallet, Wallet, parseUnits, JsonRpcProvider, type TransactionRequest, Zone } from \"quais\";\nimport crypto from \"crypto\";\nimport fs from \"fs/promises\";\nimport path from \"path\";\n\nconst WALLET_DIR = \"./data\";\nconst WALLET_FILE = path.join(WALLET_DIR, \"quai_wallet.json\");\n\nexport const getQuaiProvider = () => {\n    return new JsonRpcProvider(\n        'https://rpc.quai.network', undefined, { usePathing: true }\n    );\n};\n\n// Load or generate wallet\nconst loadOrGenerateWallet = async (): Promise<Wallet> => {\n    const provider = getQuaiProvider();\n\n    try {\n        // Check if wallet file exists\n        const walletData = await fs.readFile(WALLET_FILE, \"utf8\");\n        const { privateKey } = JSON.parse(walletData);\n        // Validate private key (basic check)\n        if (!privateKey || !privateKey.startsWith(\"0x\") || privateKey.length !== 66) {\n            throw new Error(\"Invalid private key format\");\n        }        \n        const wallet = new Wallet(privateKey, provider);\n        elizaLogger.log(\"Loaded existing Quai wallet:\", { address: wallet.address });\n        return wallet;\n    } catch (error) {\n        // If file doesn’t exist or is invalid, generate a new wallet\n        elizaLogger.log(\"No existing wallet found or error loading. Generating new wallet... \", error);\n\n        // Ensure the data directory exists\n        await fs.mkdir(WALLET_DIR, { recursive: true });\n\n        // Generate new mnemonic and wallet\n        const entropy = crypto.randomBytes(16); // 12-word mnemonic\n        const mnemonic = Mnemonic.fromEntropy(entropy);\n        const hdWallet = QuaiHDWallet.fromMnemonic(mnemonic);\n        const cyprus1Address = await hdWallet.getNextAddress(0, Zone.Cyprus1); // get the first address in the Cyrpus1 zone\n        const key = hdWallet.getPrivateKey(cyprus1Address.address); // get the private key for the address in the Cyprus1 zone\n        const wallet = new Wallet(key, provider);\n\n        // Save to disk\n        const walletData = JSON.stringify({\n            privateKey: wallet.privateKey,\n            address: wallet.address,\n            createdAt: new Date().toISOString(),\n        }, null, 2);\n        await fs.writeFile(WALLET_FILE, walletData, \"utf8\");\n\n        elizaLogger.log(\"Generated and saved new Quai wallet:\", {\n            address: wallet.address,\n        });\n\n        return wallet;\n    }\n};\n\n// Initialize wallet (runs once when plugin loads)\nconst walletPromise = loadOrGenerateWallet();\n\nexport const validateSettings = (runtime: IAgentRuntime) => {\n    const requiredSettings = [\n        \"QUAI_PRIVATE_KEY\",\n    ];\n\n    for (const setting of requiredSettings) {\n        if (!runtime.getSetting(setting)) {\n            return false;\n        }\n    }\n\n    return true;\n};\n\nexport const getQuaiAccount = async () => {\n    const account = await walletPromise;\n    return account;\n};\n\n// Define transfer content interface for native QUAI\nexport interface TransferContent extends Content {\n    recipient: string;\n    amount: string | number;\n}\n\n// Validate transfer content\nexport function isTransferContent(\n    content: unknown\n): content is TransferContent {\n    if (!content || typeof content !== 'object') {\n        return false;\n    }\n    \n    const contentObj = content as { recipient?: unknown; amount?: unknown };\n    \n    // Validate types\n    const validTypes =\n        typeof contentObj.recipient === \"string\" &&\n        (typeof contentObj.amount === \"string\" ||\n            typeof contentObj.amount === \"number\");\n    if (!validTypes) {\n        return false;\n    }\n\n    // Validate recipient address (20-bytes with 0x prefix)\n    const recipient = contentObj.recipient as string;\n    const validRecipient =\n        recipient.startsWith(\"0x\") &&\n        recipient.length === 42;\n\n    return validRecipient;\n}","import type { Plugin } from \"@elizaos/core\";\nimport {sendQuaiAction, receiveQuaiAction} from \"./actions/transfer\";\n\nexport const quaiPlugin: Plugin = {\n    name: \"quai\",\n    description: \"Quai Plugin for Eliza\",\n    actions: [sendQuaiAction, receiveQuaiAction],\n    evaluators: [],\n    providers: [],\n};\n\nexport default quaiPlugin;\n"],"mappings":"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","names":["elizaLogger","parseUnits","elizaLogger"]}