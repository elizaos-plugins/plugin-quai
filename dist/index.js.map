{"version":3,"sources":["../src/actions/transfer.ts","../src/utils/index.ts","../src/index.ts"],"sourcesContent":["import {\n    type ActionExample,\n    type HandlerCallback,\n    type IAgentRuntime,\n    type Memory,\n    ModelClass,\n    type State,\n    type Action,\n    composeContext,\n    generateObject,\n    elizaLogger,\n} from \"@elizaos/core\";\nimport {\n    getQuaiAccount,\n    isTransferContent,\n    validateSettings,\n} from \"../utils\";\nimport { formatUnits, type TransactionRequest } from \"quais\";\n\nconst transferTemplate = `Respond with a JSON markdown block containing only the extracted values. Use null for any values that cannot be determined.\n\nExample response:\n\\`\\`\\`json\n{\n    \"tokenAddress\": \"0x49d36570d4e46f48e99674bd3fcc84644ddd6b96f7c741b1562b82f9e004dc7\",\n    \"recipient\": \"0x0005C06bD1339c79700a8DAb35DE0a1b61dFBD71\",\n    \"amount\": \"0.001\"\n}\n\\`\\`\\`\n\n{{recentMessages}}\n\nGiven the recent messages, extract the following information about the requested token transfer:\n- Token contract address (if available)\n- Recipient wallet address\n- Amount to send\n\nRespond with a JSON markdown block containing only the extracted values.`;\n\nexport default {\n    name: \"SEND_TOKEN\",\n    similes: [\n        \"TRANSFER_TOKEN_ON_QUAI\",\n        \"TRANSFER_TOKENS_ON_QUAI\",\n        \"SEND_TOKENS_ON_QUAI\",\n        \"SEND_QUAI\",\n        \"PAY_ON_QUAI\",\n    ],\n    // eslint-disable-next-line\n    validate: async (runtime: IAgentRuntime, _message: Memory) => {\n        return validateSettings(runtime);\n    },\n    description:\n        \"MUST use this action if the user requests send a token or transfer a token, the request might be varied, but it will always be a token transfer. If the user requests a transfer of lords, use this action.\",\n    handler: async (\n        runtime: IAgentRuntime,\n        message: Memory,\n        state: State,\n        _options: { [key: string]: unknown },\n        callback?: HandlerCallback\n    ): Promise<boolean> => {\n        elizaLogger.log(\"Starting TRANSFER_TOKEN handler...\");\n\n        // Initialize or update state\n        const currentState = !state \n            ? await runtime.composeState(message) \n            : await runtime.updateRecentMessageState(state);\n\n        // Compose transfer context\n        const transferContext = composeContext({\n            state: currentState,\n            template: transferTemplate,\n        });\n\n        // Generate transfer content\n        const content = await generateObject({\n            runtime,\n            context: transferContext,\n            modelClass: ModelClass.MEDIUM,\n        });\n\n        elizaLogger.debug(\"Transfer content:\", content);\n\n        // Validate transfer content\n        if (!isTransferContent(content)) {\n            elizaLogger.error(\"Invalid content for TRANSFER_TOKEN action.\");\n            if (callback) {\n                callback({\n                    text: \"Not enough information to transfer tokens. Please respond with token address, recipient, and amount.\",\n                    content: { error: \"Invalid transfer content\" },\n                });\n            }\n            return false;\n        }\n\n        try {\n            const account = getQuaiAccount(runtime);\n            const amount = formatUnits(content.amount, \"wei\");\n\n            // Declare transaction object at function scope\n            const txObj: TransactionRequest = content.tokenAddress \n                ? {} // TODO: transfer QRC20s\n                : {\n                    to: content.recipient,\n                    value: amount,\n                    from: account.address,\n                };\n\n            elizaLogger.log(\n                \"Transferring\",\n                amount,\n                \"QUAI\",\n                \"to\",\n                content.recipient\n            );\n\n            const tx = await account.sendTransaction(txObj);\n\n            elizaLogger.success(`Transfer completed successfully! tx: ${tx.hash}`);\n            if (callback) {\n                callback({\n                    text: `Transfer completed successfully! tx: ${tx.hash}`,\n                    content: {},\n                });\n            }\n\n            return true;\n        } catch (error) {\n            elizaLogger.error(\"Error during token transfer:\", error);\n            if (callback) {\n                callback({\n                    text: `Error transferring tokens: ${error.message}`,\n                    content: { error: error.message },\n                });\n            }\n            return false;\n        }\n    },\n\n    examples: [\n        [\n            {\n                user: \"{{user1}}\",\n                content: {\n                    text: \"Send 10 QUAI to 0x049d36570d4e46f48e99674bd3fcc84644ddd6b96f7c741b1562b82f9e004dc7\",\n                },\n            },\n            {\n                user: \"{{agent}}\",\n                content: {\n                    text: \"I'll transfer 10 QUAI to that address right away. Let me process that for you.\",\n                },\n            },\n        ],\n        [\n            {\n                user: \"{{user1}}\",\n                content: {\n                    text: \"Please send 0.5 QUAI to 0x03fe2b97c1fd336e750087d68b9b867997fd64a2661ff3ca5a7c771641e8e7ac\",\n                },\n            },\n            {\n                user: \"{{agent}}\",\n                content: {\n                    text: \"Got it, initiating transfer of 0.5 QUAI to the provided address. I'll confirm once it's complete.\",\n                },\n            },\n        ],\n    ] as ActionExample[][],\n} as Action;\n","import type { Content, IAgentRuntime } from \"@elizaos/core\";\nimport { JsonRpcProvider, Wallet } from \"quais\";\n\nexport const validateSettings = (runtime: IAgentRuntime) => {\n    const requiredSettings = [\n        \"QUAI_PRIVATE_KEY\",\n        \"QUAI_RPC_URL\",\n    ];\n\n    for (const setting of requiredSettings) {\n        if (!runtime.getSetting(setting)) {\n            return false;\n        }\n    }\n\n    return true;\n};\n\nexport const getQuaiProvider = (runtime: IAgentRuntime) => {\n    return new JsonRpcProvider(\n        runtime.getSetting(\"QUAI_RPC_URL\"),\n    );\n};\n\nexport const getQuaiAccount = (runtime: IAgentRuntime) => {\n    const provider = getQuaiProvider(runtime);\n    const account = new Wallet(runtime.getSetting(\"QUAI_PRIVATE_KEY\"), provider);\n    return account;\n};\n\nexport interface TransferContent extends Content {\n    tokenAddress: string;\n    recipient: string;\n    amount: string | number;\n}\n\nexport function isTransferContent(\n    content: unknown\n): content is TransferContent {\n    if (!content || typeof content !== 'object') {\n        return false;\n    }\n    \n    const contentObj = content as { tokenAddress?: unknown; recipient?: unknown; amount?: unknown };\n    \n    // Validate types\n    const validTypes =\n        (contentObj.tokenAddress === null || typeof contentObj.tokenAddress === \"string\") &&\n        typeof contentObj.recipient === \"string\" &&\n        (typeof contentObj.amount === \"string\" ||\n            typeof contentObj.amount === \"number\");\n    if (!validTypes) {\n        return false;\n    }\n\n    // Validate addresses (20-bytes with 0x prefix)\n    const recipient = contentObj.recipient as string;\n    const tokenAddress = contentObj.tokenAddress as string | null;\n\n    const validRecipient =\n        recipient.startsWith(\"0x\") &&\n        recipient.length === 42;\n\n    // If tokenAddress is provided, validate it\n    const validTokenAddress = tokenAddress === null ||\n        (tokenAddress.startsWith(\"0x\") &&\n        tokenAddress.length === 42);\n\n    return validRecipient && validTokenAddress;\n}\n\n// export function isTransferContent(\n//     content: any\n// ): content is TransferContent {\n//     // Validate types\n//     const validTypes =\n//         (content.tokenAddress === null || typeof content.tokenAddress === \"string\") &&\n//         typeof content.recipient === \"string\" &&\n//         (typeof content.amount === \"string\" ||\n//             typeof content.amount === \"number\");\n//     if (!validTypes) {\n//         return false;\n//     }\n\n//     // Validate addresses (20-bytes with 0x prefix)\n//     const validRecipient =\n//         content.recipient.startsWith(\"0x\") &&\n//         content.recipient.length === 42;\n\n//     // If tokenAddress is provided, validate it\n//     const validTokenAddress = content.tokenAddress === null ||\n//         (content.tokenAddress.startsWith(\"0x\") &&\n//         content.tokenAddress.length === 42);\n\n//     return validRecipient && validTokenAddress;\n\n","import type { Plugin } from \"@elizaos/core\";\nimport transfer from \"./actions/transfer\";\n\nexport const quaiPlugin: Plugin = {\n    name: \"quai\",\n    description: \"Quai Plugin for Eliza\",\n    actions: [transfer],\n    evaluators: [],\n    providers: [],\n};\n\nexport default quaiPlugin;\n"],"mappings":"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","names":[]}